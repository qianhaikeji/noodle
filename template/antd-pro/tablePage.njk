import {
  Badge,
  Button,
  Card,
  Col,
  DatePicker,
  Divider,
  Dropdown,
  Form,
  Icon,
  Input,
  InputNumber,
  Menu,
  Row,
  Select,
  message,
  Typography,
  Alert,
  Modal,
  notification,
} from 'antd'
import { PageHeaderWrapper } from '@ant-design/pro-layout'
import React, { userEffect, useState, Fragment, useEffect } from 'react'
import { connect } from 'dva'
import moment from 'moment'
import excel from '@/services/excel'
import {downloadAllPage} from '@/utils/utils'
import TableList from '@/components/TableList'
import editForm from '@/components/Dialog/EditForm'
import QueryForm from '@/components/QueryForm'
import toast from '@/components/Toast'
{% set getMethodList = 'get' + modelName | upperFirstLetter + 'List' -%}
import { 
  {{getMethodList}}, 
}  from '@/services/api/{{apiModule}}'

const {Text} = Typography
const FormItem = Form.Item
const { Option } = Select
const { confirm } = Modal

/**
 * columns 此处写入列数据
{
  title: '项目名',
  dataIndex: 'name',
  sorter: true,
},
*/
const columns = [
  {% for ele in modelFields -%}
  {% if ele.listable -%}
  {
    title: '{{ele.desc}}',
    dataIndex: '{{ele.name}}',
  },
  {%- endif %}
  {%- endfor %}
];

/**
 * queryFormItems 此处设计查询条件form
  {
    label: '模糊搜索',
    field: 'fuzzy',
    component: <Input placeholder="请输入" />
  }
*/
const queryFormItems = [
  {% for ele in modelFields -%}
  {% if ele.filterable -%}
  {
    label: '{{ele.desc}}',
    field: '{{ele.name}}',
    component: <Input placeholder="请输入" />
  },
  {%- endif %}
  {%- endfor %}
]

/**
 * createFormItems 此处设计新建窗口属性
  {
    label: '项目名称',
    field: 'name',
    component: <Input placeholder="请输入" />,
    options: {
      rules: [
        {
          required: true,
          message: '请输入至少五个字符的规则描述！',
          min: 5,
        }
      ],
    }
  }
*/
const createFormItems = [
  {% for ele in modelFields -%}
  {% if ele.creatable -%}
  {
    label: '{{ele.desc}}',
    field: '{{ele.name}}',
    component: <Input placeholder="请输入" />,
    options: {
      rules: [
        {
          required: {{ele.required}},
        }
      ],
    }
  },
  {%- endif %}
  {%- endfor %}
]

/**
 * updateFormItems 此处设计编辑窗口属性
  {
    label: '项目名称',
    field: 'name',
    component: <Input placeholder="请输入" />,
    options: {
      rules: [
        {
          required: true,
          message: '请输入至少五个字符的规则描述！',
          min: 5,
        }
      ],
    }
  }
*/
const updateFormItems = [
  {% for ele in modelFields -%}
  {% if ele.editable -%}
  {
    label: '{{ele.desc}}',
    field: '{{ele.name}}',
    component: <Input placeholder="请输入" />,
    options: {
      rules: [
        {
          required: {{ele.required}},
        }
      ],
    }
  },
  {%- endif %}
  {%- endfor %}
]

const Widget = ({
  loading,
  list,
  pagination,
  loadList,
  deleteItem,
  modifyItem,
  createItem
}) => {
  const [queryParams, setQueryParams] = useState({})
  useEffect(() => {
    loadList({
      page: pagination.current,
      pageSize: pagination.pageSize,
    })
  }, [])

  const handleTableChange = (pagination, filters, sorter) => {
    const params = {
      page: pagination.current,
      pageSize: pagination.pageSize,
      ...queryParams,
      ...filters,
      ...sorter
    }

    loadList(params)
  }

  const refreshTable = () => {
    const params = {
      page: 1,
      pageSize: pagination.pageSize,
      ...queryParams,
    }

    loadList(params)
  }

  const opColums = [
    {% if editable or deletable -%}
    {
      title: '操作',
      render: (text, record) => (
        <Fragment>
          {% if editable -%}
          <a onClick={() => {
            editForm({
              title: '编辑{{modelText}}', 
              items: _.map(updateFormItems, ele => {
                if (record[ele.field] !== undefined) {
                  ele.options.initialValue = record[ele.field]
                }
                return ele
              }),
              onSubmit: (data) => {
                modifyItem(record.id, data)
              },
            })
          }}>编辑</a>
          {%- endif %}
          {% if deletable -%}
          <a style={ {marginLeft: '15px'} } onClick={ () => {
            confirm({
              title: '确定删除此纪录吗？',
              content: '删除后不可恢复',
              okText: '删除',
              okType: 'danger',
              cancelText: '取消',
              onOk: async() => {
                deleteItem(record.id)
              },             
            })
          } }>删除</a>
          {%- endif %}
        </Fragment>
      ),
    },
    {%- endif %}
  ]

  return (
    <PageHeaderWrapper>
      <Card bordered={false}>
        <QueryForm items={queryFormItems} onSubmit={setQueryParams} onQuery={refreshTable}></QueryForm>
        <div>
          {% if creatable -%}
          <Button style={ {marginRight: '10px'} } icon="plus" type="primary" onClick={() => editForm({
              title: '新建{{modelText}}', 
              items: createFormItems,
              onSubmit: (data) => createItem(data),
            })}>
            新建
          </Button>
          {%- endif %}
          {% if exportable -%}
          <Button style={ {marginRight: '10px'} } icon="export" type="primary" onClick={async () => {
            toast.show({message: '正在导出数据...'})
            try {
              const allData = await downloadAllPage({{getMethodList}}, queryParams)
              excel.exportJsonToXlsx('{{modelText}}', _.map(allData, ele => {
                return {
                  {% for ele in modelFields -%}
                  {% if ele.listable -%}
                  '{{ele.desc}}': ele.{{ele.name}},
                  {% endif -%}
                  {%- endfor %}
                }
              }))
            } catch (err) {
              console.log(err)
              notification.error({
                message: `导出excel失败`,
                description: err.message,
              })
            }
            toast.hide()
          }}>
            导出Excel
          </Button>
          {%- endif %}
        </div>
        <TableList
          selectedRows={[]}
          loading={loading}
          data={ {list, pagination} }
          columns={[...columns, ...opColums]}
          onChange={handleTableChange}
        />
      </Card>
    </PageHeaderWrapper>
  )
}

{% set storeModelName = modelName + 'List' -%}
const mapState = ({ {{storeModelName}}, loading }) => ({
  list: {{storeModelName}}.list,
  pagination: {{storeModelName}}.pagination,
  loading: loading.models.{{storeModelName}},
})

const mapDispatch = (dispatch) => ({
  loadList: (payload) => dispatch({
    type: '{{storeModelName}}/fetch',
    payload
  }),
  {% if deletable -%}
  deleteItem: (id) => dispatch({
    type: '{{storeModelName}}/deleteItem',
    payload: {id}
  }),
  {%- endif %}
  {% if creatable -%}
  createItem: (data) => dispatch({
    type: '{{storeModelName}}/createItem',
    payload: {data}
  }),
  {%- endif %}
  {% if editable -%}
  modifyItem: (id, data) => dispatch({
    type: '{{storeModelName}}/modifyItem',
    payload: {id, data}
  })
  {%- endif %}
})

export default connect(mapState, mapDispatch)(Widget)