'use strict'
{%- set ServiceName = serviceName | upperFirstLetter  + "Service" %}
{%- set UpperCaseModelName = modelName | upperFirstLetter %}

const _ = require('lodash')
const utils = require('../../lib/utils')
const Service = require('qhkj-framework').Service

class {{ ServiceName }} extends Service {
  constructor(ctx) {
    super(ctx, '{{ namespace }}')
  }

  async get{{UpperCaseModelName}}List (params) {
    throw new ReferenceError("method not implement!")

    let conditions = [
    ]
    
    // add custom query here
    // e.g. 
    // if (params.type) {
    //   conditions.push({type: params.type})
    // }

    let queryParams = this.formatPageParams(params)
    if (conditions.length > 0) {
      queryParams.where = {
        $and: [
          ...conditions,
          queryParams.where
        ]
      }
    }

    return await this.models.{{UpperCaseModelName}}.findAndCountAll(queryParams)
  }

  async get{{UpperCaseModelName}} (id) {
    return await this.models.{{UpperCaseModelName}}.findByPk(id)
  }

  async add{{UpperCaseModelName}} (data) {
    throw new ReferenceError("method not implement!")

    // do params check here!

    let {{modelName}} = await this.models.{{UpperCaseModelName}}.create(data, {transaction: this.t})
    if (!{{modelName}}) {
      this.throwException(400, '添加{{modelDocName}}失败!')
    }
    return {{modelName}}
  }

  async modify{{UpperCaseModelName}} (id, data) {
    throw new ReferenceError("method not implement!")

    let exist = await this.models.{{UpperCaseModelName}}.findByPk(id)
    if (!exist) {
      this.throwException(400, '无效的{{modelDocName}}!')
      return
    }

    // add set data code here
    // e.g. exist.name = data.name

    {% for attr in modelAttrs -%}
    {% if not ['id', 'password', 'username'].includes(attr) -%}
    exist.{{attr}} = data.{{attr}}
    {% endif %}
    {%- endfor %}

    await exist.save({transaction: this.t})
  }  

  async delete{{UpperCaseModelName}} (id) {
    throw new ReferenceError("method not implement!")

    let exist = await this.models.{{UpperCaseModelName}}.findByPk(id)
    if (!exist) {
      return
    }

    await this.models.{{UpperCaseModelName}}.destroyById(exist.id, {transaction: this.t})
  }
}

module.exports = {{ ServiceName }}
