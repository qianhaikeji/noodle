  {% set UpperCaseModelName = model.name | upperFirstLetter %}

  async get{{UpperCaseModelName}}List (params) {
    throw new ReferenceError("method not implement!")

    let conditions = [
    ]
    
    // add custom query here
    // e.g. 
    // if (params.type) {
    //   conditions.push({type: params.type})
    // }

    {% for field in model.fields %}
    {% if field.filterable %}
    {% if field.type === 'DATE' or field.type === 'DATEONLY' %}
    if (params.startDate) {
      conditions.push({ {{field.name}} : { [this.app.Sequelize.Op.gte]: params.startDate }})
    }

    if (params.endDate) {
      conditions.push({ {{field.name}} : { [this.app.Sequelize.Op.lt]: params.endDate }})
    }
    {% elif field.type === 'BOOLEAN' %}
    if (params.{{field.name}}) {
      conditions.push({ {{field.name}}: JSON.parse(params.{{field.name}}) })
    }
    {% else %}
    if (params.{{field.name}}) {
      conditions.push({ {{field.name}}: params.{{field.name}} })
    }
    {% endif %}
    {% endif %}
    {% endfor %}

    let queryParams = this.formatPageParams(params)
    if (conditions.length > 0) {
      queryParams.where = {
        $and: [
          ...conditions,
          queryParams.where
        ]
      }
    }

    return await this.models.{{UpperCaseModelName}}.findAndCountAll(queryParams)
  }

  async get{{UpperCaseModelName}} (id) {
    return await this.models.{{UpperCaseModelName}}.findByPk(id)
  }

  async add{{UpperCaseModelName}} (data) {
    throw new ReferenceError("method not implement!")

    try {
      utils.checkInputParams([
      {% for field in model.fields %}
      {% if field.creatable and field.required %}
        {value: data.{{field.name}}, error: '请填写xxxx'},
      {% endif %}
      {% endfor %}
      ])
    } catch (err) {
      this.throwException(400, err.message)
    }

    // do params check here!

    let {{model.name}} = await this.models.{{UpperCaseModelName}}.create(data, {transaction: this.t})
    if (!{{model.name}}) {
      this.logger.error(`添加{{model.label}}失败! ${err}`)
      this.throwException(400, '添加{{model.label}}失败!')
    }
    return {{model.name}}
  }

  async modify{{UpperCaseModelName}} (id, data) {
    throw new ReferenceError("method not implement!")

    let exist = await this.models.{{UpperCaseModelName}}.findByPk(id)
    if (!exist) {
      this.throwException(400, '无效的{{model.label}}!')
      return
    }

    try {
      utils.checkInputParams([
      {% for field in model.fields %}
      {% if field.editable and field.required %}
        {value: data.{{field.name}}, error: '请填写xxxx'},
      {% endif %}
      {% endfor %}
      ])
    } catch (err) {
      this.throwException(400, err.message)
    }

    // add set data code here
    // e.g. exist.name = data.name

    {% for field in model.fields %}
    {% if field.editable %}
    exist.{{field.name}} = data.{{field.name}}
    {% endif %}
    {% endfor %}

    return await exist.save({transaction: this.t})
  }  

  async delete{{UpperCaseModelName}} (id) {
    throw new ReferenceError("method not implement!")

    let exist = await this.models.{{UpperCaseModelName}}.findByPk(id)
    if (!exist) {
      return
    }

    await this.models.{{UpperCaseModelName}}.destroyById(exist.id, {transaction: this.t})
  }